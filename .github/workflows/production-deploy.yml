name: Production Deployment to EKS

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: read
  packages: write

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      
      - name: Extract tag version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Build and push all services to ECR
        run: |
          # Build and push all services
          services=("auth-service" "product-service" "order-service" "payment-service" "notification-service")
          
          for service in "${services[@]}"; do
            echo "Building and pushing $service..."
            docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/ecommerce/$service:${{ steps.version.outputs.VERSION }} \
              -f services/$service/Dockerfile services/$service/
            docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/ecommerce/$service:${{ steps.version.outputs.VERSION }}
          done
      
      - name: Create production namespace and ECR secret
        run: |
          # Create production namespace
          kubectl create namespace ecommerce-prod --dry-run=client -o yaml | kubectl apply -f -
          
          # Create ECR image pull secret in production namespace
          kubectl delete secret regcred -n ecommerce-prod --ignore-not-found
          kubectl create secret docker-registry regcred \
            --docker-server=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com \
            --docker-username=AWS \
            --docker-password=$(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) \
            --docker-email=admin@example.com \
            --namespace ecommerce-prod
      
      - name: Deploy all services to EKS
        run: |
          services=("auth-service" "product-service" "order-service" "payment-service" "notification-service")
          
          for service in "${services[@]}"; do
            echo "Deploying $service..."
            sed -e "s|image: $service:latest|image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/ecommerce/$service:${{ steps.version.outputs.VERSION }}|g" \
                -e "s|namespace: ecommerce|namespace: ecommerce-prod|g" \
                k8s/$service.yaml | kubectl apply -f -
          done
      
      - name: Wait for deployments to be ready
        run: |
          services=("auth-service" "product-service" "order-service" "payment-service" "notification-service")
          
          for service in "${services[@]}"; do
            echo "Waiting for $service rollout..."
            kubectl rollout status deployment/$service -n ecommerce-prod --timeout=300s
          done
      
      - name: Verify production deployment
        run: |
          echo "Production deployment completed for version ${{ steps.version.outputs.VERSION }}"
          echo "Cluster status:"
          kubectl get nodes
          echo "Production pods:"
          kubectl get pods -n ecommerce-prod
          echo "Production services:"
          kubectl get services -n ecommerce-prod
          echo "Production deployments:"
          kubectl get deployments -n ecommerce-prod
