name: Microservices CI/CD to EKS

on:
  push:
    branches: [ develop, main ]
    paths:
      - 'services/**'
  pull_request:
    branches: [ develop, main ]
    paths:
      - 'services/**'
  workflow_dispatch:

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write
      contents: read
    outputs:
      auth-service: ${{ steps.changes.outputs.auth-service }}
      product-service: ${{ steps.changes.outputs.product-service }}
      order-service: ${{ steps.changes.outputs.order-service }}
      payment-service: ${{ steps.changes.outputs.payment-service }}
      notification-service: ${{ steps.changes.outputs.notification-service }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            auth-service:
              - 'services/auth-service/**'
            product-service:
              - 'services/product-service/**'
            order-service:
              - 'services/order-service/**'
            payment-service:
              - 'services/payment-service/**'
            notification-service:
              - 'services/notification-service/**'

  build-auth-service:
    needs: detect-changes
    if: needs.detect-changes.outputs.auth-service == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: services/auth-service/package-lock.json
      
      - name: Install dependencies
        run: |
          cd services/auth-service
          npm ci
      
      - name: Run tests
        run: |
          cd services/auth-service
          npm test
      
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      
      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/ecommerce/auth-service:${{ github.sha }} \
            -f services/auth-service/Dockerfile services/auth-service/
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/ecommerce/auth-service:${{ github.sha }}
      
      - name: Deploy to development namespace
        if: github.ref == 'refs/heads/develop'
        run: |
          kubectl create namespace ecommerce-dev --dry-run=client -o yaml | kubectl apply -f -
          sed -e "s|:latest|:${{ github.sha }}|g" \
              -e "s|namespace: ecommerce|namespace: ecommerce-dev|g" \
              -e "s|ghcr.io.*|${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/ecommerce/auth-service:${{ github.sha }}|g" \
              k8s/auth-service.yaml | kubectl apply -f -
          kubectl rollout status deployment/auth-service -n ecommerce-dev

  build-product-service:
    needs: detect-changes
    if: needs.detect-changes.outputs.product-service == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: services/product-service/package-lock.json
      
      - name: Install dependencies
        run: |
          cd services/product-service
          npm ci
      
      - name: Run tests
        run: |
          cd services/product-service
          npm test
      
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      
      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/ecommerce/product-service:${{ github.sha }} \
            -f services/product-service/Dockerfile services/product-service/
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/ecommerce/product-service:${{ github.sha }}
      
      - name: Deploy to development namespace
        if: github.ref == 'refs/heads/develop'
        run: |
          kubectl create namespace ecommerce-dev --dry-run=client -o yaml | kubectl apply -f -
          sed -e "s|:latest|:${{ github.sha }}|g" \
              -e "s|namespace: ecommerce|namespace: ecommerce-dev|g" \
              -e "s|ghcr.io.*|${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/ecommerce/product-service:${{ github.sha }}|g" \
              k8s/product-service.yaml | kubectl apply -f -
          kubectl rollout status deployment/product-service -n ecommerce-dev

  build-order-service:
    needs: detect-changes
    if: needs.detect-changes.outputs.order-service == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: services/order-service/package-lock.json
      
      - name: Install dependencies
        run: |
          cd services/order-service
          npm ci
      
      - name: Run tests
        run: |
          cd services/order-service
          npm test
      
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      
      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/ecommerce/order-service:${{ github.sha }} \
            -f services/order-service/Dockerfile services/order-service/
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/ecommerce/order-service:${{ github.sha }}
      
      - name: Deploy to development namespace
        if: github.ref == 'refs/heads/develop'
        run: |
          kubectl create namespace ecommerce-dev --dry-run=client -o yaml | kubectl apply -f -
          sed -e "s|:latest|:${{ github.sha }}|g" \
              -e "s|namespace: ecommerce|namespace: ecommerce-dev|g" \
              -e "s|ghcr.io.*|${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/ecommerce/order-service:${{ github.sha }}|g" \
              k8s/order-service.yaml | kubectl apply -f -
          kubectl rollout status deployment/order-service -n ecommerce-dev

  build-payment-service:
    needs: detect-changes
    if: needs.detect-changes.outputs.payment-service == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: services/payment-service/package-lock.json
      
      - name: Install dependencies
        run: |
          cd services/payment-service
          npm ci
      
      - name: Run tests
        run: |
          cd services/payment-service
          npm test
      
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      
      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/ecommerce/payment-service:${{ github.sha }} \
            -f services/payment-service/Dockerfile services/payment-service/
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/ecommerce/payment-service:${{ github.sha }}
      
      - name: Deploy to development namespace
        if: github.ref == 'refs/heads/develop'
        run: |
          kubectl create namespace ecommerce-dev --dry-run=client -o yaml | kubectl apply -f -
          sed -e "s|:latest|:${{ github.sha }}|g" \
              -e "s|namespace: ecommerce|namespace: ecommerce-dev|g" \
              -e "s|ghcr.io.*|${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/ecommerce/payment-service:${{ github.sha }}|g" \
              k8s/payment-service.yaml | kubectl apply -f -
          kubectl rollout status deployment/payment-service -n ecommerce-dev

  build-notification-service:
    needs: detect-changes
    if: needs.detect-changes.outputs.notification-service == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: services/notification-service/package-lock.json
      
      - name: Install dependencies
        run: |
          cd services/notification-service
          npm ci
      
      - name: Run tests
        run: |
          cd services/notification-service
          npm test
      
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      
      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/ecommerce/notification-service:${{ github.sha }} \
            -f services/notification-service/Dockerfile services/notification-service/
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/ecommerce/notification-service:${{ github.sha }}
      
      - name: Deploy to development namespace
        if: github.ref == 'refs/heads/develop'
        run: |
          kubectl create namespace ecommerce-dev --dry-run=client -o yaml | kubectl apply -f -
          sed -e "s|:latest|:${{ github.sha }}|g" \
              -e "s|namespace: ecommerce|namespace: ecommerce-dev|g" \
              -e "s|ghcr.io.*|${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/ecommerce/notification-service:${{ github.sha }}|g" \
              k8s/notification-service.yaml | kubectl apply -f -
          kubectl rollout status deployment/notification-service -n ecommerce-dev
